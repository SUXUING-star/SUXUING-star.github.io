(function(){var t={3937:function(t){t.exports={attributes:{title:"亚马逊评论文本简要的分析",date:"2024-11-17T00:00:00.000Z",summary:"这是数据分析部分的代码的描述和一些注释",coverImage:"12-8-2.jpg",pinned:!1},html:"<p>我做的数据分析主要分为两个部分，其实这个第一个部分是后面补充的。</p>\n<h1>自己简单爬取数据然后自己分析</h1>\n<p>这是油猴脚本写的js脚本，直接丢进油猴里边就完事，代码编写耗时可能20分钟以内</p>\n<pre><code class=\"language-javascript\">// ==UserScript==\n// @name         amazon-scraper1\n// @namespace    http://tampermonkey.net/\n// @version      2024-11-06\n// @description  try to take over the world!\n// @author       suxing\n// @match        https://www.amazon.com/*\n// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=amazon.com\n// @grant        none\n// ==/UserScript==\n\n\n\nfunction main(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;amazonbutton&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },2000)\n    }).then(()=&gt;{\n        let pageMain = document.querySelector(&quot;.sg-col-inner&quot;);\n        console.log(pageMain)\n        if(pageMain){\n            let button = document.createElement(&quot;button&quot;);\n            button.className=&quot;button-test&quot;\n            button.innerHTML = &quot;点击爬取json&quot;;\n            button.style.padding = &quot;10px 20px&quot;;\n            button.style.fontSize = &quot;16px&quot;;\n            button.style.backgroundColor = &quot;#4CAF50&quot;;\n            button.style.color = &quot;white&quot;;\n            button.style.border = &quot;none&quot;;\n            button.style.borderRadius = &quot;5px&quot;;\n            button.style.cursor = &quot;pointer&quot;;\n            button.style.boxShadow = &quot;0px 4px 6px rgba(0, 0, 0, 0.1)&quot;;\n            button.style.transition = &quot;background-color 0.3s&quot;;\n            button.onmouseover = function() {\n                button.style.backgroundColor = &quot;#45a049&quot;;\n            };\n            button.onmouseout = function() {\n                button.style.backgroundColor = &quot;#4CAF50&quot;;\n            };\n            button.onclick=()=&gt;{scrapefunc();}\n            var buttonContainer = document.createElement(&quot;div&quot;);\n            buttonContainer.style.display = &quot;flex&quot;;\n            buttonContainer.style.justifyContent = &quot;center&quot;;\n            buttonContainer.style.alignItems = &quot;center&quot;;\n            buttonContainer.style.height = &quot;100px&quot;; // 调整高度以便更好地居中\n            buttonContainer.appendChild(button);\n\n            // 在 pageMain 元素的上方插入按钮\n            pageMain.parentNode.insertBefore(buttonContainer, pageMain);\n        }\n    })\n}\n\nfunction exportjson(data){\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    const formattedDate = `${year}-${month}-${day}`;\n    a.download = `amazon-Products${formattedDate}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n}\nfunction scrapefunc(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;amazon-scraper test1&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },700)\n    }).then(()=&gt;{\n        new Promise((resolve)=&gt;{\n            window.scrollTo({\n                top: 1000,\n                behavior: &quot;smooth&quot;\n            });\n            setTimeout(()=&gt;{\n                resolve();\n            },1000)\n        }).then(()=&gt;{\n            new Promise((resolve)=&gt;{\n                window.scrollTo({\n                    top: 4000,\n                    behavior: &quot;smooth&quot;\n                });\n                setTimeout(()=&gt;{\n                    resolve();\n                },1000)\n            }).then(()=&gt;{\n                new Promise((resolve)=&gt;{\n                    window.scrollTo({\n                        top: 8000,\n                        behavior: &quot;smooth&quot;\n                    });\n                    setTimeout(()=&gt;{\n                        resolve();\n                    },1000)\n                }).then(()=&gt;{\n                    new Promise((resolve)=&gt;{\n                        window.scrollTo({\n                            top: document.body.scrollHeight,\n                            behavior: &quot;smooth&quot;\n                        });\n                        setTimeout(()=&gt;{\n                            resolve();\n                        },700)\n                    }).then(()=&gt;{\n                        let productlist = [];\n                        document.querySelectorAll('div.a-section.a-spacing-small.puis-padding-left-small.puis-padding-right-small').forEach(container =&gt; {\n                            let product = {};\n\n                            // 标题和URL: 从商品标题容器获取\n                            try {\n                                const titleContainer = container.querySelector('[data-cy=&quot;title-recipe&quot;]');\n                                product.title = titleContainer.querySelector('.a-size-base-plus.a-color-base').textContent.trim();\n                                product.url = titleContainer.querySelector('a.a-link-normal').getAttribute('href');\n                            } catch (e) {\n                                product.title = '';\n                                product.url = '';\n                            }\n\n                            // 价格: 从价格容器获取\n                            try {\n                                const priceContainer = container.querySelector('[data-cy=&quot;price-recipe&quot;]');\n                                const priceElement = priceContainer.querySelector('.a-price .a-offscreen');\n                                product.price = priceElement ? priceElement.textContent.trim() : '';\n                            } catch (e) {\n                                product.price = '';\n                            }\n\n                            // 评分和评分数: 从评论容器获取\n                            try {\n                                const reviewsContainer = container.querySelector('[data-cy=&quot;reviews-block&quot;]');\n                                const ratingElement = reviewsContainer.querySelector('.a-icon-alt');\n                                product.rating = ratingElement ? ratingElement.textContent.trim() : '';\n\n                                const reviewsElement = reviewsContainer.querySelector('.rush-component .s-underline-text');\n                                product.ratingnum = reviewsElement ? reviewsElement.textContent.trim() : '';\n                            } catch (e) {\n                                product.rating = '';\n                                product.ratingnum = '';\n                            }\n\n                            if (product.title) {  // 只添加有标题的商品\n                                productlist.push(product);\n                            }\n                        });\n                        const productListJson = JSON.stringify(productlist, null, 2);\n                        console.log(productListJson);\n                        exportjson(productListJson);\n                        const nexturl=document.querySelector(&quot;.s-pagination-next&quot;).getAttribute(&quot;href&quot;)\n                        window.scrollTo({\n                            top: 0,\n                            behavior: &quot;smooth&quot;\n                        });\n                        new Promise((resolve)=&gt;{\n                            setTimeout(()=&gt;{\n                                resolve();\n                            },500)\n                        }).then(()=&gt;{\n                            location.href=nexturl\n                        })\n\n                    })\n                })\n            })\n        })\n    })\n}\n\n\n\n\n\nwindow.addEventListener(&quot;load&quot;,()=&gt;{\n    main();\n\n},false)\n</code></pre>\n<h2>python分析代码</h2>\n<pre><code class=\"language-python\"></code></pre>\n<h1>深度学习模型构建部分</h1>\n<h2>简要数据分析</h2>\n<pre><code class=\"language-python\"># 导入所需库\nfrom datasets import load_dataset\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader, Dataset\nfrom transformers import BertTokenizer\n\n# 加载数据集，并取前2000条数据\ndataset = load_dataset(&quot;McAuley-Lab/Amazon-Reviews-2023&quot;, &quot;raw_review_All_Beauty&quot;, trust_remote_code=True)\ndata = pd.DataFrame(dataset[&quot;full&quot;][:10000])  # 仅取2000条数据\nprint(data.head())\n\n# 1. 词云生成\nall_text = &quot; &quot;.join(data[&quot;text&quot;].fillna(&quot;&quot;))\nwordcloud = WordCloud(width=800, height=400, background_color=&quot;white&quot;).generate(all_text)\n\nplt.figure(figsize=(10, 5))\nplt.imshow(wordcloud, interpolation=&quot;bilinear&quot;)\nplt.axis(&quot;off&quot;)\nplt.title(&quot;Word Cloud of Amazon Reviews&quot;)\nplt.show()\n\n# 2. 用户画像分析\n# 评分分布\nplt.figure(figsize=(8, 5))\nsns.histplot(data[&quot;rating&quot;], bins=5, kde=True)\nplt.xlabel(&quot;Rating&quot;)\nplt.title(&quot;Distribution of Ratings&quot;)\nplt.show()\n\n# 验证购买分析\nverified_purchase_counts = data[&quot;verified_purchase&quot;].value_counts()\nplt.figure(figsize=(8, 5))\nsns.barplot(x=verified_purchase_counts.index, y=verified_purchase_counts.values)\nplt.xlabel(&quot;Verified Purchase&quot;)\nplt.ylabel(&quot;Count&quot;)\nplt.title(&quot;Distribution of Verified Purchases&quot;)\nplt.show()\n\n# 3. 时间序列分析：评论随时间的变化\ndata[&quot;timestamp&quot;] = pd.to_datetime(data[&quot;timestamp&quot;], unit=&quot;ms&quot;)  # 转换时间戳为日期格式\ndata.set_index(&quot;timestamp&quot;, inplace=True)\ndata[&quot;rating&quot;].resample(&quot;M&quot;).mean().plot(figsize=(12, 6))\nplt.title(&quot;Average Rating Over Time (Monthly)&quot;)\nplt.xlabel(&quot;Time&quot;)\nplt.xlim(pd.Timestamp(&quot;2012-01-01&quot;), pd.Timestamp(&quot;2023-12-31&quot;))\nplt.ylabel(&quot;Average Rating&quot;)\nplt.show()\n\n# 4. 评论字数分析\ndata[&quot;review_length&quot;] = data[&quot;text&quot;].apply(lambda x: len(str(x).split()))  # 计算每条评论的词数\ndata[&quot;review_length&quot;].resample(&quot;M&quot;).mean().plot(figsize=(12, 6))\nplt.title(&quot;Average Review Length Over Time (Monthly)&quot;)\nplt.xlabel(&quot;Time&quot;)\nplt.xlim(pd.Timestamp(&quot;2012-01-01&quot;), pd.Timestamp(&quot;2023-12-31&quot;))\nplt.ylabel(&quot;Average Review Length&quot;)\nplt.show()\n\n\n\n\n\n</code></pre>\n"}},9317:function(t){t.exports={attributes:{title:"（考研待开坑）YOLO计算机视觉&目标检测模型",date:"2024-11-01T00:00:00.000Z",summary:"在尝试的学习CV技术",coverImage:"12-8-2.jpg",pinned:!1},html:"<h1>学点CV</h1>\n<p>（CV太烧内存了，6G不够用。。。所以还没开始跑代码）</p>\n<p>你以为的YOLO ：<strong>you only look once</strong></p>\n<p>我以为的YOLO： <strong>YOU ONLY LIVE ONCE</strong></p>\n<p><strong>珍爱生命，远离深度学习啊！！</strong></p>\n<h1>常见的视觉任务</h1>\n<ol>\n<li>最简单的任务：图片分类</li>\n<li>进阶：语义分割</li>\n<li>再进阶：目标检测（锚框选定）</li>\n<li>更加高端：3维预测（如路面检测无人车自动驾驶）</li>\n<li>运动监测（肢体检测，嘴型）</li>\n</ol>\n<h1>研究一下YOLO的模型结构</h1>\n<p>以YOLOv3为例</p>\n<ol>\n<li>\n<p>输入:  模型的输入是一张图片。</p>\n</li>\n<li>\n<p>骨干网络 (Backbone Network):  用于提取图像特征。YOLOv3 使用 Darknet-53 作为骨干网络，它是一个 53 层的卷积神经网络，具有残差连接，可以有效地提取图像特征。</p>\n</li>\n<li>\n<p>特征金字塔网络 (Feature Pyramid Network, FPN):  用于在不同尺度上检测目标。FPN 将骨干网络提取的不同层级的特征图进行融合，生成多个尺度的特征图，从而可以检测不同大小的目标。</p>\n</li>\n<li>\n<p>检测头 (Detection Head):  用于预测目标的类别和位置。YOLOv3 的检测头包含三个分支，分别对应三个不同的尺度。每个分支都包含一系列卷积层，最终输出一个三维张量，其中包含每个网格单元的预测信息。</p>\n</li>\n</ol>\n<p>将输入图像分成 S x S 个网格单元。\n每个网格单元负责预测 B 个边界框和 C 个类别概率。\n每个边界框包含 5 个预测值：x，y，w，h 和置信度。\n(x, y) 是边界框中心相对于网格单元的坐标。\n(w, h) 是边界框的宽度和高度相对于整张图片的比例。\n置信度表示边界框包含目标的概率以及边界框的准确度。\n每个网格单元还会预测 C 个类别概率，表示该网格单元包含某个类别的目标的概率。</p>\n"}},2879:function(t){t.exports={attributes:{title:"用亚马逊评论数据，玩一下生成式模型",date:"2024-11-01T00:00:00.000Z",summary:"学习一下生成式模型",coverImage:"12-8-2.jpg",pinned:!1},html:"<h1>T5预训练模型上做微调</h1>\n<pre><code class=\"language-python\"># 导入所需库\nfrom datasets import load_dataset\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport torch.nn as nn\nfrom transformers import (\n    T5ForConditionalGeneration, T5Tokenizer,\n    get_linear_schedule_with_warmup\n)\nimport gc\nfrom torch.utils.data import DataLoader, Dataset\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport pandas as pd\nimport copy\nimport os\nimport random\nfrom torch.nn.utils.rnn import pad_sequence\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom collections import Counter\nimport re\n\n# 下载必要的NLTK数据\nnltk.download('punkt')\nnltk.download('wordnet')\nfrom nltk.corpus import wordnet\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\ndef set_seed(seed=42):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\nset_seed()\n# 数据增强方法\nclass TextAugmenter:\n    @staticmethod\n    def synonym_replacement(text, n=1):\n        words = word_tokenize(text)\n        new_words = words.copy()\n        random_word_list = list(set([word for word in words if word.isalnum()]))\n        n = min(n, len(random_word_list))\n        \n        for _ in range(n):\n            random_word = random.choice(random_word_list)\n            synonyms = []\n            for syn in wordnet.synsets(random_word):\n                for lemma in syn.lemmas():\n                    synonyms.append(lemma.name())\n            if len(synonyms) &gt; 0:\n                synonym = random.choice(list(set(synonyms)))\n                random_idx = random.randint(0, len(words) - 1)\n                new_words[random_idx] = synonym\n        \n        return ' '.join(new_words)\n\n    @staticmethod\n    def random_deletion(text, p=0.1):\n        words = word_tokenize(text)\n        if len(words) == 1:\n            return text\n        \n        new_words = []\n        for word in words:\n            if random.random() &gt; p:\n                new_words.append(word)\n        \n        if len(new_words) == 0:\n            rand_int = random.randint(0, len(words)-1)\n            new_words.append(words[rand_int])\n            \n        return ' '.join(new_words)\n\n    @staticmethod\n    def random_swap(text, n=1):\n        words = word_tokenize(text)\n        new_words = words.copy()\n        for _ in range(n):\n            if len(new_words) &gt;= 2:\n                idx1, idx2 = random.sample(range(len(new_words)), 2)\n                new_words[idx1], new_words[idx2] = new_words[idx2], new_words[idx1]\n        return ' '.join(new_words)\n\nclass ReviewGenerationDataset(Dataset):\n    def __init__(self, texts, ratings, tokenizer, max_len=128, augment=False):\n        # 将Series转换为list以避免索引问题\n        self.texts = texts.tolist()\n        self.ratings = ratings.tolist()\n        self.tokenizer = tokenizer\n        self.max_len = max_len\n        self.augment = augment\n        self.augmenter = TextAugmenter()\n\n    def __len__(self):\n        return len(self.texts)\n\n    def augment_text(self, text):\n        augmentation_ops = [\n            (self.augmenter.synonym_replacement, {'n': 1}),\n            (self.augmenter.random_deletion, {'p': 0.1}),\n            (self.augmenter.random_swap, {'n': 1})\n        ]\n        op, params = random.choice(augmentation_ops)\n        return op(text, **params)\n\n    def __getitem__(self, idx):\n        text = str(self.texts[idx])\n        rating = self.ratings[idx]\n        \n        if self.augment and random.random() &lt; 0.3:\n            text = self.augment_text(text)\n        \n        prompt = f&quot;Generate a {rating}-star review:&quot;\n        \n        prompt_encoding = self.tokenizer(\n            prompt,\n            max_length=32,\n            padding='max_length',\n            truncation=True,\n            return_tensors='pt'\n        )\n        \n        target_encoding = self.tokenizer(\n            text,\n            max_length=self.max_len,\n            padding='max_length',\n            truncation=True,\n            return_tensors='pt'\n        )\n\n        return {\n            'input_ids': prompt_encoding['input_ids'].squeeze(),\n            'attention_mask': prompt_encoding['attention_mask'].squeeze(),\n            'labels': target_encoding['input_ids'].squeeze(),\n            'decoder_attention_mask': target_encoding['attention_mask'].squeeze()\n        }\n\n\nclass ReviewGenerator(nn.Module):\n    def __init__(self, model_name=&quot;t5-base&quot;):\n        super().__init__()\n        self.model = T5ForConditionalGeneration.from_pretrained(model_name)\n        # 启用梯度检查点以减少内存使用\n        self.model.gradient_checkpointing_enable()\n        \n    def forward(self, input_ids, attention_mask, labels=None, decoder_attention_mask=None):\n        outputs = self.model(\n            input_ids=input_ids,\n            attention_mask=attention_mask,\n            labels=labels,\n            decoder_attention_mask=decoder_attention_mask\n        )\n        return outputs\n\n\ndef prepare_data(batch_size=8):  # 减小batch size以降低内存使用\n    # 加载数据集\n    dataset = load_dataset(&quot;McAuley-Lab/Amazon-Reviews-2023&quot;, &quot;raw_review_All_Beauty&quot;, trust_remote_code=True)\n    data = pd.DataFrame(dataset[&quot;full&quot;][:200000])\n    \n    # 数据清洗\n    data['text'] = data['text'].fillna(&quot;&quot;).astype(str)\n    data = data[data['text'].str.len() &gt; 10]\n    data = data.reset_index(drop=True)\n    \n    # 划分训练集和验证集\n    train_texts, val_texts, train_ratings, val_ratings = train_test_split(\n        data['text'], data['rating'],\n        test_size=0.1,\n        random_state=42\n    )\n    \n    tokenizer = T5Tokenizer.from_pretrained('t5-base', model_max_length=512)  # 减小max_length\n    \n    train_dataset = ReviewGenerationDataset(train_texts, train_ratings, tokenizer, augment=True)\n    val_dataset = ReviewGenerationDataset(val_texts, val_ratings, tokenizer, augment=False)\n    \n    train_loader = DataLoader(\n        train_dataset, \n        batch_size=batch_size, \n        shuffle=True,\n        drop_last=True,\n        pin_memory=True  # 启用pin_memory加速数据传输\n    )\n    val_loader = DataLoader(\n        val_dataset, \n        batch_size=batch_size,\n        drop_last=True,\n        pin_memory=True\n    )\n    \n    return train_loader, val_loader, tokenizer\n\n\ndef train_generator(model, train_loader, val_loader, epochs=5, save_dir=&quot;generator_checkpoints&quot;, \n                   gradient_accumulation_steps=4):\n    # 创建输出目录\n    os.makedirs(save_dir, exist_ok=True)\n    os.makedirs(&quot;generative-output&quot;, exist_ok=True)\n    \n    optimizer = torch.optim.AdamW(model.parameters(), lr=2e-5)\n    num_training_steps = (len(train_loader) // gradient_accumulation_steps) * epochs\n    num_warmup_steps = num_training_steps // 10\n    scheduler = get_linear_schedule_with_warmup(\n        optimizer,\n        num_warmup_steps=num_warmup_steps,\n        num_training_steps=num_training_steps\n    )\n    \n    best_val_loss = float('inf')\n    train_losses = []\n    val_losses = []\n    \n    for epoch in range(epochs):\n        model.train()\n        total_train_loss = 0\n        optimizer.zero_grad()\n        \n        with tqdm(total=len(train_loader), desc=f&quot;Epoch {epoch+1}/{epochs}&quot;) as pbar:\n            for batch_idx, batch in enumerate(train_loader):\n                # 将数据移动到GPU\n                input_ids = batch['input_ids'].to(device)\n                attention_mask = batch['attention_mask'].to(device)\n                labels = batch['labels'].to(device)\n                decoder_attention_mask = batch['decoder_attention_mask'].to(device)\n                \n                outputs = model(\n                    input_ids=input_ids,\n                    attention_mask=attention_mask,\n                    labels=labels,\n                    decoder_attention_mask=decoder_attention_mask\n                )\n                \n                loss = outputs.loss / gradient_accumulation_steps\n                total_train_loss += loss.item() * gradient_accumulation_steps\n                \n                loss.backward()\n                \n                if (batch_idx + 1) % gradient_accumulation_steps == 0:\n                    torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n                    optimizer.step()\n                    scheduler.step()\n                    optimizer.zero_grad()\n                    \n                    # 清理缓存\n                    if torch.cuda.is_available():\n                        torch.cuda.empty_cache()\n                \n                pbar.update(1)\n                pbar.set_postfix({\n                    'train_loss': f'{loss.item() * gradient_accumulation_steps:.4f}'\n                })\n        \n        # 处理最后一个不完整的累积步\n        if len(train_loader) % gradient_accumulation_steps != 0:\n            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n            optimizer.step()\n            scheduler.step()\n            optimizer.zero_grad()\n        \n        # 评估阶段\n        model.eval()\n        total_val_loss = 0\n        \n        with torch.no_grad():\n            for batch in val_loader:\n                input_ids = batch['input_ids'].to(device)\n                attention_mask = batch['attention_mask'].to(device)\n                labels = batch['labels'].to(device)\n                decoder_attention_mask = batch['decoder_attention_mask'].to(device)\n                \n                outputs = model(\n                    input_ids=input_ids,\n                    attention_mask=attention_mask,\n                    labels=labels,\n                    decoder_attention_mask=decoder_attention_mask\n                )\n                \n                total_val_loss += outputs.loss.item()\n        \n        avg_train_loss = total_train_loss / len(train_loader)\n        avg_val_loss = total_val_loss / len(val_loader)\n        \n        train_losses.append(avg_train_loss)\n        val_losses.append(avg_val_loss)\n        \n        print(f&quot;\\nEpoch {epoch+1}&quot;)\n        print(f&quot;Average training loss: {avg_train_loss:.4f}&quot;)\n        print(f&quot;Average validation loss: {avg_val_loss:.4f}&quot;)\n        \n        if avg_val_loss &lt; best_val_loss:\n            best_val_loss = avg_val_loss\n            torch.save(model.state_dict(), f&quot;{save_dir}/best_model.pth&quot;)\n            print(&quot;Saved new best model!&quot;)\n        \n        # 绘制并保存loss曲线\n        plt.figure(figsize=(10, 6))\n        plt.plot(range(1, epoch + 2), train_losses, label='Training Loss')\n        plt.plot(range(1, epoch + 2), val_losses, label='Validation Loss')\n        plt.xlabel('Epoch')\n        plt.ylabel('Loss')\n        plt.title('Training and Validation Loss')\n        plt.legend()\n        plt.grid(True)\n        plt.savefig('generative-output/loss_curve.png')\n        plt.close()\n        \n        # 强制进行垃圾回收\n        gc.collect()\n        if torch.cuda.is_available():\n            torch.cuda.empty_cache()\n\n\ndef generate_review(model, tokenizer, rating, max_length=150):\n    model.eval()\n    prompt = f&quot;Generate a {rating}-star review:&quot;\n    \n    inputs = tokenizer(\n        prompt,\n        return_tensors=&quot;pt&quot;,\n        max_length=32,\n        padding=True,\n        truncation=True\n    ).to(device)\n    \n    with torch.no_grad():\n        outputs = model.model.generate(\n            input_ids=inputs[&quot;input_ids&quot;],\n            attention_mask=inputs[&quot;attention_mask&quot;],\n            max_length=max_length,\n            num_beams=5,\n            no_repeat_ngram_size=2,\n            top_k=50,\n            top_p=0.95,\n            temperature=0.7,\n            do_sample=True\n        )\n    \n    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n    return generated_text\n\n\ndef main():\n    # 清理GPU内存\n    if torch.cuda.is_available():\n        torch.cuda.empty_cache()\n        \n    train_loader, val_loader, tokenizer = prepare_data()\n    model = ReviewGenerator().to(device)\n    train_generator(model, train_loader, val_loader)\n    \n    # 生成示例评论\n    model.load_state_dict(torch.load(&quot;generator_checkpoints/best_model.pth&quot;))\n    \n    for rating in [1, 3, 5]:\n        print(f&quot;\\nGenerated {rating}-star review:&quot;)\n        review = generate_review(model, tokenizer, rating)\n        print(review)\n\nif __name__ == &quot;__main__&quot;:\n    main()\n</code></pre>\n"}},3352:function(t){t.exports={attributes:{title:"亚马逊评论数据做文本情感分类模型",date:"2024-12-08T00:00:00.000Z",summary:"在尝试的学习NLP技术",coverImage:"12-8-2.jpg",pinned:!0},html:'<h1>亚马逊评论数据分析</h1>\n<h2>跨境电商背景</h2>\n<p>目前跨境电商蓬勃发展，为了抓住这一风口，深入了解外国电商平台至关重要。亚马逊作为全球最大、流量最高的国际电商平台，是跨境电商入门研究的首选。</p>\n<p>本文首先对亚马逊商品数据和评论数据进行简要分析，然后基于评论数据构建深度学习模型进行情感分类，以预测评论的情感倾向（正面、中性、负面）。</p>\n<h2>数据获取</h2>\n<p>使用 Tampermonkey 脚本进行网页数据采集，优势在于快速简便，几分钟即可完成脚本编写，并利用 JS 操作 DOM。然而，多页面采集较为繁琐，因为网页访问是手动进行的。</p>\n<p><strong>脚本逻辑:</strong></p>\n<ol>\n<li>加载亚马逊网站时，在导航栏等区域添加一个按钮，点击即可爬取当前页面商品信息。</li>\n<li>点击按钮后，刷新页面模拟真人操作，滚动至底部等待刷新完成。</li>\n<li>使用 JS CSS 选择器定位商品框，遍历提取标题、价格等信息。</li>\n</ol>\n<p><strong>(附带数据获取的图片)</strong></p>\n<p><strong>问题:</strong>  网站使用哈希法或不写类名，需要调整定位策略，从单用类名/ID 定位到结合层级定位。</p>\n<h2>数据处理</h2>\n<p>使用 Python 脚本处理数据：</p>\n<ol>\n<li>合并 JSON 文件，清理数据。</li>\n<li>将价格、评分转换为浮点数，评论数量转换为整数。</li>\n<li>删除重复项。</li>\n</ol>\n<h2>数据可视化</h2>\n<p>使用 Python 脚本对处理后的数据进行可视化：</p>\n<p><strong>(附带词云图，价格分布曲线图，价格与评分关系图，评分分布图)</strong></p>\n<h2>在 PySpark 上运行 Python 脚本</h2>\n<p>在已配置 Spark 和 PySpark 的环境下：</p>\n<ol>\n<li>创建并激活 Python 虚拟环境。</li>\n<li>使用 pip 安装依赖库。</li>\n<li>运行脚本并保存可视化图片。</li>\n</ol>\n<h2>进阶分析：开源数据</h2>\n<h3>问题背景分析</h3>\n<p>在前述商品数据分析基础上，本文利用开源大型数据集构建深度学习模型，进行文本情感分析。通过不断调整模型和参数，验证集准确率从 0.6 提升至 0.9 以上。</p>\n<h3>数据分析步骤</h3>\n<ol>\n<li>\n<p><strong>数据选择:</strong> Hugging Face 平台上的 Amazon_reviews-2023 数据集。选择开源数据集的优势在于：</p>\n<ul>\n<li>数据量庞大，无需担心数据缺失。</li>\n<li>数据经过预处理，可直接进行分析。</li>\n<li>数据开源维护，具有较高的鲁棒性和泛化性。</li>\n</ul>\n</li>\n<li>\n<p><strong>数据描述:</strong> (数据集大小，格式示例)</p>\n</li>\n<li>\n<p><strong>具体分析步骤:</strong></p>\n<ul>\n<li>数据分析和可视化：词云分析、用户画像分析、时间序列分析。</li>\n<li>机器学习模型：构建神经网络模型进行文本情感分析。</li>\n</ul>\n</li>\n</ol>\n<h3>数据简要分析和可视化</h3>\n<p><strong>(附带词云图，评分分布图，验证购买分析图，用户相似度热力图，时间序列分析图)</strong></p>\n<h3>文本情感分析模型</h3>\n<h4>模型初步构建</h4>\n<p><strong>模型 1-1 (回归):</strong></p>\n<ul>\n<li>结构: BERT 分词 + Embedding + LSTM + 全连接层(tanh)</li>\n<li>问题: 拟合效果异常，验证集损失很高。</li>\n</ul>\n<p><strong>模型 1-2 (分类):</strong></p>\n<ul>\n<li>结构: Embedding + LSTM + 全连接层 + Softmax</li>\n<li>损失函数: 交叉熵</li>\n<li>问题: 验证集准确度低，模型过于简单。</li>\n</ul>\n<p><strong>模型 1-3 (双层 LSTM):</strong></p>\n<ul>\n<li>结构: 双层 LSTM</li>\n<li>问题: 准确率仍低，主要预测五星评论，收敛过快。</li>\n</ul>\n<p><strong>模型 1-4 (双向 LSTM + 注意力):</strong></p>\n<ul>\n<li>结构: 双向 LSTM + 注意力机制 + 多层全连接 + Dropout</li>\n<li>优化器: AdamW + 权重衰减 + 梯度裁剪</li>\n<li>其他: 分层学习率，模型保存，RMSE 评估</li>\n<li>结果: 性能显著提升，能预测其他星级评论。</li>\n<li>问题: 1-4 星评论预测效果仍需改进。</li>\n</ul>\n<p><strong>(附带模型结构图、公式、训练曲线图、混淆矩阵)</strong></p>\n<h4>在 BERT 预训练模型上做微调 (Fine-tune)</h4>\n<p><strong>模型 1-5 (BERT 微调):</strong></p>\n<ul>\n<li>结构: BERT + 分类头 (全连接 + ReLU + Dropout) + Softmax</li>\n<li>优化: 差异化学习率，权重衰减</li>\n<li>结果: 性能进一步提升。</li>\n</ul>\n<p><strong>模型 1-6 (数据增强 &amp; 训练策略优化):</strong></p>\n<ul>\n<li>模型: Dropout 调整为 0.5, 添加 BatchNorm, 冻结 BERT 底层</li>\n<li>训练: 分层采样, warmup 学习率</li>\n<li>数据: 动态文本裁剪, 增大批量大小</li>\n<li>结果: 缓解过拟合，性能略有提升。</li>\n</ul>\n<p><strong>模型 1-7 (数据平衡):</strong></p>\n<ul>\n<li>数据: 3-4 星过采样和文本增强，加权采样</li>\n<li>损失函数: 加权交叉熵</li>\n<li>结果: 3-4 星评论预测提升，但 5 星误判率增加。</li>\n</ul>\n<p><strong>模型 1-8 (模型结构优化):</strong></p>\n<ul>\n<li>模型: 多头注意力 + 特征增强层 (LayerNorm + Dropout)</li>\n<li>训练: warmup 学习率，分层学习率，早停</li>\n<li>结果: 准确率大幅提升，但出现过拟合。</li>\n</ul>\n<p><strong>模型 1-9 (更复杂的分类头 &amp; 训练策略优化):</strong></p>\n<ul>\n<li>模型: 更复杂的分类头</li>\n<li>训练: 余弦退火学习率 + warmup，更高初始学习率，断点续训，注意力可视化</li>\n<li>结果: 准确率达到 0.92，仍有少量过拟合。</li>\n</ul>\n<p><strong>(附带模型结构图，训练曲线图，混淆矩阵，注意力可视化结果)</strong></p>\n<h4>其他可实现模型</h4>\n<ul>\n<li>\n<p><strong>MAMBA 模型:</strong> 优势明显，但目前仅支持 Linux 系统。</p>\n</li>\n<li>\n<p><strong>其他预训练模型:</strong> RoBERTa, XLNet, ELECTRA, FinBERT, DeBERTa, ERNIE 等。</p>\n</li>\n<li>\n<p><strong>多语言文本情感分析模型:</strong>  使用 XLM-RoBERTa-base 构建，中英文测试结果良好，但在中性评论预测方面置信度较低。</p>\n</li>\n<li>\n<p><strong>生成式预训练模型:</strong> 使用 T5 模型进行初步实验，未来可使用更大数据集和更合适的模型 (如 GPT 系列) 提升性能。</p>\n</li>\n</ul>\n<h3>模型解释及不足</h3>\n<ul>\n<li>模型假设文本情绪与评分绑定，可能存在不符合此假设的数据，导致假中性和假正向性。</li>\n<li>数据量相对较小，限制了模型的泛化能力。</li>\n<li>未划分测试集，仅使用验证集评估模型性能。</li>\n<li>未使用 AllBeauty 全部数据集，因为数据量增加后性能反而下降，表明需要更复杂的模型和更多数据。</li>\n</ul>\n<h3>其他补充</h3>\n<ul>\n<li>配置说明: 初期使用 TensorFlow，后期使用 PyTorch + CUDA。</li>\n<li>训练补充:  记录了模型调试过程中遇到的问题和解决方法.</li>\n</ul>\n<h3>源码附录和参考文献</h3>\n<ul>\n<li>在线链接\n<a href="/posts/etc/dl.rar">所有源码压缩包</a></li>\n<li>博客: https://suxing.online/#/</li>\n<li>参考文献:  列出了 LSTM、双向 RNN、注意力机制、Transformer、BERT、T5、Mamba 等模型的相关论文。</li>\n</ul>\n'}},277:function(t){t.exports={attributes:{title:"记录一下写过的爬虫脚本",date:"2024-11-16T00:00:00.000Z",summary:"写的都是js脚本",coverImage:"post2-1.png",pinned:!1},html:"<p><s>不会有人还在写python脚本吧？</s>  <br>\n无论是什么语言写的脚本，都必须要操作DOM  <br>\n既然都操作都操作DOM了，我何不用JS来写呢？ \\</p>\n<p>下文记录一下自己写过的爬虫脚本，数据整理代码写在另一篇了。</p>\n<h1>pipiads的爬虫脚本</h1>\n<p>pipiads上面主要有tiktok小店的数据，和一些广告的数据。</p>\n<h2>主要是爬取商品数据的信息</h2>\n<pre><code class=\"language-javascript\">\n// ==UserScript==\n// @name         皮皮一键爬取\n// @namespace    http://tampermonkey.net/\n// @version      2024-09-14\n// @description  try to take over the world!\n// @author       suxing\n// @match        https://www.pipiads.com/*\n// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=pipiads.com\n// @grant        none\n// ==/UserScript==\n\n\nfunction main(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;pipiads-button1&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },4000)\n    }).then(()=&gt;{\n        let pageMain = document.querySelector(&quot;.main-container&quot;);\n        console.log(pageMain)\n        if(pageMain){\n            const task1Button = document.createElement(&quot;button&quot;);\n            task1Button.className = &quot;button-test&quot;;\n            task1Button.innerHTML = &quot;任务1 小店爬取&quot;;\n            styleButton(task1Button);\n            task1Button.onclick=()=&gt;{task1();}\n\n            const task2Button = document.createElement(&quot;button&quot;);\n            task2Button.className = &quot;button-test&quot;;\n            task2Button.innerHTML = &quot;任务2 产品爬取&quot;;\n            styleButton(task2Button);\n            task2Button.onclick=()=&gt;{task2();}\n            \n\n            var buttonContainer = document.createElement(&quot;div&quot;);\n            buttonContainer.style.display = &quot;flex&quot;;\n            buttonContainer.style.justifyContent = &quot;center&quot;;\n            buttonContainer.style.alignItems = &quot;center&quot;;\n            buttonContainer.style.height = &quot;100px&quot;;\n            buttonContainer.appendChild(task1Button);\n            buttonContainer.appendChild(task2Button);\n            pageMain.parentNode.insertBefore(buttonContainer, pageMain);\n\n\n        }\n    })\n}\n\nfunction exportjson(data,taskname){\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    const formattedDate = `${year}-${month}-${day}`;\n    a.download = `${taskname}-${formattedDate}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n}\nfunction task2(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;pipiads-scraper test1&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },700)\n    }).then(()=&gt;{\n        new Promise((resolve)=&gt;{\n            window.scrollTo({\n                top: 7000,\n                behavior: &quot;smooth&quot;\n            });\n            setTimeout(()=&gt;{\n                resolve();\n            },1000)\n        }).then(()=&gt;{\n            new Promise((resolve)=&gt;{\n                window.scrollTo({\n                    top: 14000,\n                    behavior: &quot;smooth&quot;\n                });\n                setTimeout(()=&gt;{\n                    resolve();\n                },1000)\n            }).then(()=&gt;{\n                new Promise((resolve)=&gt;{\n                    window.scrollTo({\n                        top: 21000,\n                        behavior: &quot;smooth&quot;\n                    });\n                    setTimeout(()=&gt;{\n                        resolve();\n                    },1000)\n                }).then(()=&gt;{\n                    new Promise((resolve)=&gt;{\n                        window.scrollTo({\n                            top: document.body.scrollHeight,\n                            behavior: &quot;smooth&quot;\n                        });\n                        setTimeout(()=&gt;{\n                            resolve();\n                        },700)\n                    }).then(()=&gt;{\n                        let productlist=[];\n                        document.querySelectorAll(&quot;ul.wt-block-grid&gt;li.wt-block-grid__item&quot;).forEach(li=&gt;{\n                            let title=li.querySelector(&quot;a.title.a-link&quot;).innerText;\n                            let url=li.querySelector(&quot;a.title.a-link&quot;).getAttribute(&quot;href&quot;);\n                            let price=&quot;&quot;\n                            try{\n                                price=li.querySelector(&quot;.price-box&quot;).innerText.replace(/[()]/g, &quot;&quot;);\n                            }catch{\n                                price=&quot;&quot;;\n                            }\n                            let datablock=li.querySelector(&quot;.data-count&quot;);\n                            var i=0;\n                            let temp=[];\n                            datablock.querySelectorAll(&quot;.item&quot;).forEach(item=&gt;{\n                                if(i==0){let thumb=item.querySelector(&quot;.value&quot;).innerText;temp.push(thumb)}\n                                if(i==1){let ads=item.querySelector(&quot;.value&quot;).innerText;temp.push(ads)}\n                                if(i==2){let increase=item.querySelector(&quot;.value&quot;).innerText;temp.push(increase)}\n                                i++;\n                            })\n                            let products={\n                                &quot;title&quot;:title,\n                                &quot;url&quot;:url,\n                                &quot;price&quot;:price,\n                                &quot;thumb&quot;:temp[0],\n                                &quot;ads&quot;:temp[1],\n                                &quot;increase&quot;:temp[2],\n                            }\n                            productlist.push(products);\n\n                        })\n                        const productListJson = JSON.stringify(productlist, null, 2);\n                        console.log(productListJson);\n                        exportjson(productListJson,&quot;task2&quot;);\n                        window.scrollTo({\n                            top: 0,\n                            behavior: &quot;smooth&quot;\n                        });\n                    })\n                })\n            })\n        })\n    })\n}\n\nfunction task1(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;pipiads-scraper test1&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },700)\n    }).then(()=&gt;{\n        new Promise((resolve)=&gt;{\n            window.scrollTo({\n                top: 7000,\n                behavior: &quot;smooth&quot;\n            });\n            setTimeout(()=&gt;{\n                resolve();\n            },1000)\n        }).then(()=&gt;{\n            new Promise((resolve)=&gt;{\n                window.scrollTo({\n                    top: 14000,\n                    behavior: &quot;smooth&quot;\n                });\n                setTimeout(()=&gt;{\n                    resolve();\n                },1000)\n            }).then(()=&gt;{\n                new Promise((resolve)=&gt;{\n                    window.scrollTo({\n                        top: 21000,\n                        behavior: &quot;smooth&quot;\n                    });\n                    setTimeout(()=&gt;{\n                        resolve();\n                    },1000)\n                }).then(()=&gt;{\n                    new Promise((resolve)=&gt;{\n                        window.scrollTo({\n                            top: document.body.scrollHeight,\n                            behavior: &quot;smooth&quot;\n                        });\n                        setTimeout(()=&gt;{\n                            resolve();\n                        },700)\n                    }).then(()=&gt;{\n                        let productlist=[];\n                        document.querySelectorAll(&quot;ul.wt-block-grid&gt;li.wt-block-grid__item&quot;).forEach(li=&gt;{\n                            let title=li.querySelector(&quot;a.title.a-link&quot;).innerText;\n                            let url=li.querySelector(&quot;a.title.a-link&quot;).getAttribute(&quot;href&quot;);\n                            let price=&quot;&quot;\n                            try{\n                                price=li.querySelector(&quot;span.usdPrice&quot;).innerText.replace(/[()]/g, &quot;&quot;);\n                            }catch{\n                                price=li.querySelector(&quot;strong.price&quot;).innerText;\n                            }\n                            let quantity=li.querySelector(&quot;.sales-value&quot;).innerText;\n                            let datablock=li.querySelector(&quot;.data-count&quot;);\n                            let adsblock=li.querySelector(&quot;.time-data-box&quot;);\n                            var i=0;\n                            let temp=[];\n                            datablock.querySelectorAll(&quot;.item&quot;).forEach(item=&gt;{\n                                if(i==0){let ads=item.querySelector(&quot;.value&quot;).innerText;temp.push(ads)}\n                                if(i==1){let thumb=item.querySelector(&quot;.value&quot;).innerText;temp.push(thumb)}\n                                if(i==2){let thumbrate=item.querySelector(&quot;.value&quot;).innerText;temp.push(thumbrate)}\n                                i++;\n                            })\n                            let temp1=[]\n                            var i1=0\n                            adsblock.querySelectorAll(&quot;.time-item&quot;).forEach(item=&gt;{\n                                if(i1==0){let starttime=item.querySelector(&quot;._value&quot;).innerText;temp1.push(starttime)}\n                                if(i1==1){let endtime=item.querySelector(&quot;._value&quot;).innerText;temp1.push(endtime)}\n                                if(i1==2){let nums=item.querySelector(&quot;._value&quot;).innerText;temp1.push(nums)}\n                                i1++;\n\n                            })\n                            let products={\n                                &quot;title&quot;:title,\n                                &quot;url&quot;:url,\n                                &quot;price&quot;:price,\n                                &quot;quantity&quot;:quantity,\n                                &quot;ads&quot;:temp[0],\n                                &quot;thumb&quot;:temp[1],\n                                &quot;thumbrate&quot;:temp[2],\n                                &quot;starttime&quot;:temp1[0],\n                                &quot;endtime&quot;:temp1[1],\n                                &quot;adsnums&quot;:temp1[2]\n                            }\n                            productlist.push(products);\n\n                        })\n                        const productListJson = JSON.stringify(productlist, null, 2);\n                        console.log(productListJson);\n                        exportjson(productListJson,&quot;task1&quot;);\n                        window.scrollTo({\n                            top: 0,\n                            behavior: &quot;smooth&quot;\n                        });\n                    })\n                })\n            })\n        })\n    })\n}\nfunction styleButton(button) {\n    button.style.padding = &quot;7px 15px&quot;;\n    button.style.margin = &quot;5px&quot;;\n    button.style.fontSize = &quot;16px&quot;;\n    button.style.backgroundColor = &quot;#4CAF50&quot;;\n    button.style.color = &quot;white&quot;;\n    button.style.border = &quot;none&quot;;\n    button.style.borderRadius = &quot;5px&quot;;\n    button.style.cursor = &quot;pointer&quot;;\n    button.style.boxShadow = &quot;0px 4px 6px rgba(0, 0, 0, 0.1)&quot;;\n    button.style.transition = &quot;background-color 0.3s&quot;;\n    button.onmouseover = function() {\n        button.style.backgroundColor = &quot;#45a049&quot;;\n    };\n    button.onmouseout = function() {\n        button.style.backgroundColor = &quot;#4CAF50&quot;;\n    };\n}\n\n\n\n\nwindow.addEventListener(&quot;load&quot;,()=&gt;{\n    main();\n},false)\n</code></pre>\n<h1>sellercenter爬虫</h1>\n<p>当时随便找到的网站，上面不少数据是可以免费查看的，很爽。\n随手就搞了一个爬虫，虽然没怎么用。</p>\n<pre><code class=\"language-javascript\">// ==UserScript==\n// @name         ebayscraper1\n// @namespace    http://tampermonkey.net/\n// @version      2024-10-14\n// @description  try to take over the world!\n// @author       suxing\n// @match        https://sellercenter.io/*\n// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=ebay.com\n// @grant        none\n// ==/UserScript==\n\n\nfunction main(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;sc-test!&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },2000)\n    }).then(()=&gt;{\n        let pageMain = document.querySelector(&quot;.el-table__header-wrapper&quot;);\n        console.log(pageMain)\n        if(pageMain){\n            let button = document.createElement(&quot;button&quot;);\n            button.className=&quot;button-test&quot;\n            button.innerHTML = &quot;点击爬取json&quot;;\n            button.style.padding = &quot;10px 20px&quot;;\n            button.style.fontSize = &quot;16px&quot;;\n            button.style.backgroundColor = &quot;#4CAF50&quot;;\n            button.style.color = &quot;white&quot;;\n            button.style.border = &quot;none&quot;;\n            button.style.borderRadius = &quot;5px&quot;;\n            button.style.cursor = &quot;pointer&quot;;\n            button.style.boxShadow = &quot;0px 4px 6px rgba(0, 0, 0, 0.1)&quot;;\n            button.style.transition = &quot;background-color 0.3s&quot;;\n            button.onmouseover = function() {\n                button.style.backgroundColor = &quot;#45a049&quot;;\n            };\n            button.onmouseout = function() {\n                button.style.backgroundColor = &quot;#4CAF50&quot;;\n            };\n            button.onclick=()=&gt;{scrapefunc();}\n            var buttonContainer = document.createElement(&quot;div&quot;);\n            buttonContainer.style.display = &quot;flex&quot;;\n            buttonContainer.style.justifyContent = &quot;center&quot;;\n            buttonContainer.style.alignItems = &quot;center&quot;;\n            buttonContainer.style.height = &quot;100px&quot;; // 调整高度以便更好地居中\n            buttonContainer.appendChild(button);\n\n            // 在 pageMain 元素的上方插入按钮\n            pageMain.parentNode.insertBefore(buttonContainer, pageMain);\n        }\n    })\n}\n\nfunction exportjson(data){\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');  \n    const day = String(today.getDate()).padStart(2, '0');  \n    const formattedDate = `${year}-${month}-${day}`;\n    a.download = `ebay${formattedDate}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n}\nfunction scrapefunc(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;ebay-scraper test1&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },1000)\n    }).then(()=&gt;{\n        new Promise((resolve)=&gt;{\n            window.scrollTo({\n                top: 2000,\n                behavior: &quot;smooth&quot;\n            });\n            setTimeout(()=&gt;{\n                resolve();\n            },1000)\n        }).then(()=&gt;{\n            let productlist=[];\n            document.querySelectorAll(&quot;.el-table__row &quot;).forEach(li=&gt;{\n                let title=li.querySelector(&quot;.productNameNew&quot;).innerText;\n                \n                let price=li.querySelector(&quot;.priceShow&quot;).innerText  \n                let cate=li.querySelector(&quot;.el-tooltip__trigger&quot;).innerText\n                let quantity=&quot;&quot;   \n                try{\n                    quantity=li.querySelector(&quot;.cell&gt;span&quot;).innerText;\n                }catch{\n                    quantity=&quot;不显示&quot;\n                }                   \n                let info =&quot;&quot;\n                try{\n                    info=li.querySelector(&quot;.viewLabel&quot;).innerText; \n        \n                }\n                catch{\n                    shipping=&quot;不显示&quot;\n                }\n\n                \n                let products={\n                    &quot;title&quot;:title,\n                    &quot;cate&quot;:cate,\n                    &quot;price&quot;:price,\n                    &quot;quantity&quot;:quantity,\n                    &quot;info&quot;:info,\n\n                }                                                                      \n                productlist.push(products);\n                })\n                const productListJson = JSON.stringify(productlist, null, 2);\n                console.log(productListJson);\n                exportjson(productListJson);\n                window.scrollTo({\n                    top: 0,\n                    behavior: &quot;smooth&quot;\n                });\n            })        \n\n        })\n}\n\n\n\n\n\nwindow.addEventListener(&quot;load&quot;,()=&gt;{ \n    main();\n\n},false)\n</code></pre>\n<h1>ebay爬虫</h1>\n<p>当时做客户需求搞的脚本，爬了二手服务器，内存条，硬盘数据</p>\n<pre><code class=\"language-javascipt\">// ==UserScript==\n// @name         ebayscraper1\n// @namespace    http://tampermonkey.net/\n// @version      2024-10-14\n// @description  try to take over the world!\n// @author       suxing\n// @match        https://www.ebay.com/*\n// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=ebay.com\n// @grant        none\n// ==/UserScript==\n\n\nfunction main(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;pipiads-button1&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },2000)\n    }).then(()=&gt;{\n        let pageMain = document.querySelector(&quot;.s-answer-region&quot;);\n        console.log(pageMain)\n        if(pageMain){\n            let button = document.createElement(&quot;button&quot;);\n            button.className=&quot;button-test&quot;\n            button.innerHTML = &quot;点击爬取json&quot;;\n            button.style.padding = &quot;10px 20px&quot;;\n            button.style.fontSize = &quot;16px&quot;;\n            button.style.backgroundColor = &quot;#4CAF50&quot;;\n            button.style.color = &quot;white&quot;;\n            button.style.border = &quot;none&quot;;\n            button.style.borderRadius = &quot;5px&quot;;\n            button.style.cursor = &quot;pointer&quot;;\n            button.style.boxShadow = &quot;0px 4px 6px rgba(0, 0, 0, 0.1)&quot;;\n            button.style.transition = &quot;background-color 0.3s&quot;;\n            button.onmouseover = function() {\n                button.style.backgroundColor = &quot;#45a049&quot;;\n            };\n            button.onmouseout = function() {\n                button.style.backgroundColor = &quot;#4CAF50&quot;;\n            };\n            button.onclick=()=&gt;{scrapefunc();}\n            var buttonContainer = document.createElement(&quot;div&quot;);\n            buttonContainer.style.display = &quot;flex&quot;;\n            buttonContainer.style.justifyContent = &quot;center&quot;;\n            buttonContainer.style.alignItems = &quot;center&quot;;\n            buttonContainer.style.height = &quot;100px&quot;; // 调整高度以便更好地居中\n            buttonContainer.appendChild(button);\n\n            // 在 pageMain 元素的上方插入按钮\n            pageMain.parentNode.insertBefore(buttonContainer, pageMain);\n        }\n    })\n}\n\nfunction exportjson(data){\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');  \n    const day = String(today.getDate()).padStart(2, '0');  \n    const formattedDate = `${year}-${month}-${day}`;\n    a.download = `ebay${formattedDate}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n}\nfunction scrapefunc(){\n    new Promise((resolve)=&gt;{\n        console.log(&quot;ebay-scraper test1&quot;);\n        setTimeout(()=&gt;{\n            resolve();\n        },1000)\n    }).then(()=&gt;{\n        new Promise((resolve)=&gt;{\n            window.scrollTo({\n                top: 2000,\n                behavior: &quot;smooth&quot;\n            });\n            setTimeout(()=&gt;{\n                resolve();\n            },1000)\n        }).then(()=&gt;{\n            new Promise((resolve)=&gt;{\n                window.scrollTo({\n                    top: 5000,\n                    behavior: &quot;smooth&quot;\n                });\n                setTimeout(()=&gt;{\n                    resolve();\n                },1000)\n            }).then(()=&gt;{\n                new Promise((resolve)=&gt;{\n                    window.scrollTo({\n                        top: 8000,\n                        behavior: &quot;smooth&quot;\n                    });\n                    setTimeout(()=&gt;{\n                        resolve();\n                    },1000)\n                }).then(()=&gt;{\n                    new Promise((resolve)=&gt;{\n                        window.scrollTo({\n                            top: 12000,\n                            behavior: &quot;smooth&quot;\n                        });\n                        setTimeout(()=&gt;{\n                            resolve();\n                        },700)\n                    }).then(()=&gt;{    \n                        new Promise((resolve)=&gt;{\n                            window.scrollTo({\n                                top: 14000,\n                                behavior: &quot;smooth&quot;\n                            });\n                            setTimeout(()=&gt;{\n                                resolve();\n                            },700)\n    \n                        }).then(()=&gt;{\n                            let productlist=[];\n                            document.querySelectorAll(&quot;.s-item__info &quot;).forEach(li=&gt;{\n                                let title=li.querySelector(&quot;.s-item__title&gt;span&quot;).innerText;\n                                let secondtitle=&quot;&quot;\n                                try{\n                                    secondtitle=li.querySelector(&quot;.s-item__subtitle&gt;span&quot;).innerText;\n\n                                }\n                                catch{\n                                    secondtitle=&quot;不显示&quot;\n\n                                }\n                                \n                                let price=li.querySelector(&quot;span.s-item__price&quot;).innerText    \n                                let quantity=&quot;&quot;   \n                                try{\n                                    quantity=li.querySelector(&quot;span.s-item__quantitySold&quot;).innerText;\n                                }catch{\n                                    quantity=&quot;不显示&quot;\n                                }                   \n                                let loc=&quot;&quot;\n                                try{\n                                    loc=li.querySelector(&quot;span.s-item__location&quot;).innerText;\n\n                                }\n                                catch{\n                                    loc=&quot;不显示&quot;\n                                }\n                                let shipping =&quot;&quot;\n                                try{\n                                    shipping=li.querySelector(&quot;span.s-item__shipping&quot;).innerText; \n                      \n                                }\n                                catch{\n                                    shipping=&quot;不显示&quot;\n                                }\n    \n                                \n                                let products={\n                                    &quot;title&quot;:title,\n                                    &quot;secondtitle&quot;:secondtitle,\n                                    &quot;location&quot;:loc,\n                                    &quot;price&quot;:price,\n                                    &quot;quantity&quot;:quantity,\n                                    &quot;shipping&quot;:shipping,\n    \n                                }\n                                if (products.title!=&quot;Shop on eBay&quot;){\n                                    productlist.push(products);\n\n                                }\n                                \n                \n                            })\n                            const productListJson = JSON.stringify(productlist, null, 2);\n                            console.log(productListJson);\n                            exportjson(productListJson);\n                            let nextpage=document.querySelector(&quot;.pagination__next&quot;).href\n                            window.scrollTo({\n                                top: 0,\n                                behavior: &quot;smooth&quot;\n                            });\n                            location.href=nextpage\n                        })                              \n    \n                           \n                        \n                    })\n                })        \n\n            })\n               \n        })\n    })\n}\n\n\n\n\n\nwindow.addEventListener(&quot;load&quot;,()=&gt;{ \n    main();\n\n},false)\n</code></pre>\n<h1>tiktok爬虫</h1>\n<p>这个没什么卵用的脚本，做到一半我差不多就弃掉了。</p>\n<p>主要出发点就是，自己手点太慢了想搞个脚本一键保存tiktok后台数据不多好。</p>\n<p>结果发现还不如手点。。。所以全自动脚本等于全自己手动脚本。</p>\n<pre><code class=\"language-javascript\">// ==UserScript==\n// @name         tkshop test\n// @namespace    http://tampermonkey.net/\n// @version      2024-10-28\n// @description  字节跳动被我踩在脚下。\n// @author       suxing\n// @match        https://seller.tiktokglobalshop.com/*\n// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=tiktokglobalshop.com\n// @grant        none\n// ==/UserScript==\n\nfunction simulateClick(selector) {\n    const element = document.querySelector(selector);\n    \n    if (element) {\n        const rect = element.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n\n        // 创建鼠标移动事件\n        const mouseMoveEvent = new MouseEvent('mousemove', {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n            clientX: centerX,\n            clientY: centerY\n        });\n\n        // 创建点击事件\n        const mouseDownEvent = new MouseEvent('mousedown', {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n            clientX: centerX,\n            clientY: centerY\n        });\n\n        const mouseUpEvent = new MouseEvent('mouseup', {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n            clientX: centerX,\n            clientY: centerY\n        });\n\n        const clickEvent = new MouseEvent('click', {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n            clientX: centerX,\n            clientY: centerY\n        });\n\n        // 模拟鼠标移动\n        document.dispatchEvent(mouseMoveEvent);\n        // 模拟鼠标按下和松开\n        element.dispatchEvent(mouseDownEvent);\n        element.dispatchEvent(mouseUpEvent);\n        // 模拟点击\n        element.dispatchEvent(clickEvent);\n    } else {\n        console.error('Element not found for selector:', selector);\n    }\n}\n\nfunction delay(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\nasync function waitForModalToClose() {\n    // 等待打开的框消失\n    while (document.querySelector('div[role=&quot;dialog&quot;]')) {\n        await delay(500); // 每500毫秒检查一次\n    }\n}\n\nfunction main() {\n    new Promise((resolve) =&gt; {\n        console.log(&quot;tktest&quot;);\n        setTimeout(() =&gt; {\n            resolve();\n        }, 10000); // 等待 10 秒\n    }).then(() =&gt; {\n        const pageMain = document.querySelector(&quot;#compass-header&quot;);\n        console.log(pageMain);\n        if (pageMain) {\n            // 创建第一个按钮，用于第一个任务\n            const task1Button = document.createElement(&quot;button&quot;);\n            task1Button.className = &quot;button-test&quot;;\n            task1Button.innerHTML = &quot;任务 1 总览数据导出）&quot;;\n            styleButton(task1Button);\n            task1Button.onclick = async () =&gt; {\n                task1Button.disabled = true; // 禁用按钮以防重复点击\n                console.log(&quot;任务 1: 点击按钮&quot;);\n                // 执行任务 1 的操作\n                await simulateClick('button[data-tid=&quot;m4b_button&quot;]'); // 假设是导出按钮\n                task1Button.disabled = false; // 点击完成后启用按钮\n            };\n\n            // 创建第二个按钮，用于第二个任务\n            const task2Button = document.createElement(&quot;button&quot;);\n            task2Button.className = &quot;button-test&quot;;\n            task2Button.innerHTML = &quot;任务 2: 商品数据导出）&quot;;\n            styleButton(task2Button);\n            task2Button.onclick = async () =&gt; {\n                task2Button.disabled = true; // 禁用按钮以防重复点击\n                console.log(&quot;任务 2: 商品数据导出&quot;);\n\n                // 点击配置指标按钮\n                const configButtonSelector = 'div.mx-12 button';\n                simulateClick(configButtonSelector);\n\n                // 等待框关闭\n                await waitForModalToClose();\n\n                // 点击导出按钮\n                const exportButtonSelector = 'div.flex.gap-8 button';\n                simulateClick(exportButtonSelector);\n\n                task2Button.disabled = false; // 点击完成后启用按钮\n            };\n\n            // 创建按钮容器并插入按钮\n            const buttonContainer = document.createElement(&quot;div&quot;);\n            buttonContainer.style.display = &quot;flex&quot;;\n            buttonContainer.style.justifyContent = &quot;center&quot;;\n            buttonContainer.style.alignItems = &quot;center&quot;;\n            buttonContainer.style.height = &quot;50px&quot;; // 调整高度以便更好地居中\n            buttonContainer.appendChild(task1Button);\n            buttonContainer.appendChild(task2Button);\n\n            // 在 pageMain 元素的上方插入按钮容器\n            pageMain.parentNode.insertBefore(buttonContainer, pageMain);\n        }\n    });\n}\n\nfunction styleButton(button) {\n    button.style.padding = &quot;10px 20px&quot;;\n    button.style.margin = &quot;5px&quot;;\n    button.style.fontSize = &quot;16px&quot;;\n    button.style.backgroundColor = &quot;#4CAF50&quot;;\n    button.style.color = &quot;white&quot;;\n    button.style.border = &quot;none&quot;;\n    button.style.borderRadius = &quot;5px&quot;;\n    button.style.cursor = &quot;pointer&quot;;\n    button.style.boxShadow = &quot;0px 4px 6px rgba(0, 0, 0, 0.1)&quot;;\n    button.style.transition = &quot;background-color 0.3s&quot;;\n    button.onmouseover = function() {\n        button.style.backgroundColor = &quot;#45a049&quot;;\n    };\n    button.onmouseout = function() {\n        button.style.backgroundColor = &quot;#4CAF50&quot;;\n    };\n}\n\n// 调用 main 函数以执行代码\nmain();\n\n</code></pre>\n"}},8774:function(t){t.exports={attributes:{title:"（开坑）前端网页小项目",date:"2024-12-08T00:00:00.000Z",summary:"在尝试的学习NLP技术",coverImage:"12-8-2.jpg"},html:"<h1>还是学一下前端了</h1>\n<p>在尝试vue3前端项目（这个网站就是vue做的）</p>\n<p>并且也在尝试react技术栈</p>\n<p>（待开坑）</p>\n"}},8277:function(t){t.exports={attributes:{title:"测试文章",date:"2024-11-1",summary:"这是我的第一篇博客文章",coverImage:"2.png",pinned:!1},html:'<h1>欢迎来到我的博客</h1>\n<p>这是一篇测试博客，如果它能正常显示成功就代表它运行正常了。</p>\n<h2>数学公式示例</h2>\n<p>$\nE = mc^2\n$</p>\n<h2>代码块示例</h2>\n<pre><code class="language-python">def hello_world():\n    print(&quot;Hello, World!&quot;)\n</code></pre>\n<h2>图片示例</h2>\n<p><img src="posts/images/1.png" alt="本地图片"></p>\n'}},1137:function(t,n,e){"use strict";var o=e(5130),r=e(6768);const a={class:"app"};function i(t,n,e,o,i,s){const u=(0,r.g2)("blog-header"),l=(0,r.g2)("router-view"),c=(0,r.g2)("blog-footer");return(0,r.uX)(),(0,r.CE)("div",a,[(0,r.bF)(u),(0,r.bF)(l),(0,r.bF)(c)])}var s=e(4232);const u={class:"header-content"},l={class:"header-main"},c={class:"site-nav"};function p(t,n,e,o,a,i){const p=(0,r.g2)("router-link");return(0,r.uX)(),(0,r.CE)("header",{class:(0,s.C4)(["header",{"header-scrolled":a.isScrolled}])},[(0,r.Lk)("div",u,[(0,r.Lk)("div",l,[n[3]||(n[3]=(0,r.Lk)("h1",{class:"site-title"},"星云茶聚",-1)),(0,r.Lk)("nav",c,[(0,r.bF)(p,{to:"/",class:"nav-link"},{default:(0,r.k6)((()=>n[0]||(n[0]=[(0,r.eW)("首页")]))),_:1}),(0,r.bF)(p,{to:"/archive",class:"nav-link"},{default:(0,r.k6)((()=>n[1]||(n[1]=[(0,r.eW)("归档")]))),_:1}),(0,r.bF)(p,{to:"/about",class:"nav-link"},{default:(0,r.k6)((()=>n[2]||(n[2]=[(0,r.eW)("关于")]))),_:1})])])])],2)}var d={name:"BlogHeader",data(){return{isScrolled:!1,lastScrollTop:0,headerHeight:0,scrollThreshold:50,scrollTimer:null}},mounted(){this.headerHeight=this.$el.offsetHeight,window.addEventListener("scroll",this.handleScroll,{passive:!0}),document.body.style.paddingTop=`${this.headerHeight+40}px`},beforeUnmount(){window.removeEventListener("scroll",this.handleScroll),document.body.style.paddingTop="0",this.scrollTimer&&clearTimeout(this.scrollTimer)},methods:{handleScroll(){this.scrollTimer&&cancelAnimationFrame(this.scrollTimer),this.scrollTimer=requestAnimationFrame((()=>{const t=window.scrollY;if(t<=this.scrollThreshold)return void(this.isScrolled=!1);const n=t-this.lastScrollTop;Math.abs(n)>this.scrollThreshold&&(this.isScrolled=!(n>0),this.lastScrollTop=t)}))}}},m=e(1241);const g=(0,m.A)(d,[["render",p],["__scopeId","data-v-1e9d4ba0"]]);var q=g;const h={class:"footer"};function b(t,n,e,o,a,i){return(0,r.uX)(),(0,r.CE)("footer",h,[(0,r.Lk)("p",null,"© "+(0,s.v_)(i.currentYear)+" 星云茶聚. All rights reserved.",1),n[0]||(n[0]=(0,r.Lk)("div",{class:"social-links"},[(0,r.Lk)("a",{href:"#"},"微博"),(0,r.eW)(" | "),(0,r.Lk)("a",{href:"https://github.com/SUXUING-star/SUXUING-star.github.io"},"GitHub"),(0,r.eW)(" | "),(0,r.Lk)("a",{href:"#"},"LinkedIn")],-1))])}var f={name:"BlogFooter",computed:{currentYear(){return(new Date).getFullYear()}}};const _=(0,m.A)(f,[["render",b]]);var v=_,y={name:"App",components:{BlogHeader:q,BlogFooter:v}};const w=(0,m.A)(y,[["render",i]]);var k=w,x=e(1387);const T={class:"home-page"},C={key:0,class:"pinned-posts"},S={class:"posts-grid"},E={class:"regular-posts"},L={key:0,class:"section-title"},P={class:"posts-grid"},B={key:1,class:"pagination"},M=["disabled"],z={class:"pagination-numbers"},A=["onClick"],j=["disabled"];function O(t,n,e,o,a,i){const u=(0,r.g2)("blog-post");return(0,r.uX)(),(0,r.CE)("div",T,[n[3]||(n[3]=(0,r.Lk)("section",{class:"banner"},[(0,r.Lk)("div",{class:"banner-content"},[(0,r.Lk)("h2",null,"欢迎来到这个神奇的地方！"),(0,r.Lk)("p",null,"记录成长，探索未知的世界。")])],-1)),o.pinnedPosts.length?((0,r.uX)(),(0,r.CE)("section",C,[n[2]||(n[2]=(0,r.Lk)("h3",{class:"section-title"},"📌 置顶文章",-1)),(0,r.Lk)("div",S,[((0,r.uX)(!0),(0,r.CE)(r.FK,null,(0,r.pI)(o.pinnedPosts,(t=>((0,r.uX)(),(0,r.Wv)(u,{key:t.id,post:t,onClick:n=>o.viewPost(t.id)},null,8,["post","onClick"])))),128))])])):(0,r.Q3)("",!0),(0,r.Lk)("section",E,[o.pinnedPosts.length?((0,r.uX)(),(0,r.CE)("h3",L,"最新文章")):(0,r.Q3)("",!0),(0,r.Lk)("div",P,[((0,r.uX)(!0),(0,r.CE)(r.FK,null,(0,r.pI)(o.paginatedRegularPosts,(t=>((0,r.uX)(),(0,r.Wv)(u,{key:t.id,post:t,onClick:n=>o.viewPost(t.id)},null,8,["post","onClick"])))),128))])]),o.totalPages>1?((0,r.uX)(),(0,r.CE)("div",B,[(0,r.Lk)("button",{class:"pagination-btn",disabled:1===o.currentPage,onClick:n[0]||(n[0]=t=>o.changePage(o.currentPage-1))}," ← 上一页 ",8,M),(0,r.Lk)("div",z,[((0,r.uX)(!0),(0,r.CE)(r.FK,null,(0,r.pI)(o.displayedPages,(t=>((0,r.uX)(),(0,r.CE)("button",{key:t,class:(0,s.C4)(["page-number",{active:t===o.currentPage}]),onClick:n=>o.changePage(t)},(0,s.v_)(t),11,A)))),128))]),(0,r.Lk)("button",{class:"pagination-btn",disabled:o.currentPage===o.totalPages,onClick:n[1]||(n[1]=t=>o.changePage(o.currentPage+1))}," 下一页 → ",8,j)])):(0,r.Q3)("",!0)])}e(4114),e(8992),e(4520);var R=e(4249),D=e(144);const N={key:0,class:"pin-badge"},F={class:"post-image"},U=["src","alt"],I={key:1,src:"/placeholder-image.gif",alt:"Placeholder Image",loading:"lazy"},X={class:"post-content"},$={class:"post-title"},Y={class:"post-meta"},H={class:"post-date"},J={class:"post-summary"};function W(t,n,e,o,a,i){return(0,r.uX)(),(0,r.CE)("article",{class:(0,s.C4)(["blog-post-card",{"blog-post-pinned":e.post.pinned}]),onClick:n[1]||(n[1]=n=>t.$emit("click"))},[e.post.pinned?((0,r.uX)(),(0,r.CE)("div",N,n[2]||(n[2]=[(0,r.Lk)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[(0,r.Lk)("line",{x1:"12",y1:"17",x2:"12",y2:"22"}),(0,r.Lk)("path",{d:"M5 17h14v-1.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V6h1a2 2 0 0 0 0-4H8a2 2 0 0 0 0 4h1v4.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24Z"})],-1),(0,r.Lk)("span",null,"置顶",-1)]))):(0,r.Q3)("",!0),(0,r.Lk)("div",F,[e.post.coverImage?((0,r.uX)(),(0,r.CE)("img",{key:0,src:e.post.coverImage,alt:e.post.title,onError:n[0]||(n[0]=(...t)=>i.handleImageError&&i.handleImageError(...t)),loading:"lazy"},null,40,U)):((0,r.uX)(),(0,r.CE)("img",I))]),(0,r.Lk)("div",X,[(0,r.Lk)("h2",$,(0,s.v_)(e.post.title),1),(0,r.Lk)("div",Y,[(0,r.Lk)("span",H,(0,s.v_)(e.post.date),1)]),(0,r.Lk)("p",J,(0,s.v_)(e.post.summary),1),n[3]||(n[3]=(0,r.Lk)("div",{class:"post-footer"},[(0,r.Lk)("span",{class:"read-more"},"阅读全文 →")],-1))])],2)}var G={name:"BlogPostItem",props:{post:{type:Object,required:!0,default:()=>({coverImage:"",summary:""}),validator:function(t){return t&&"string"===typeof t.title&&"string"===typeof t.date&&(!("pinned"in t)||"boolean"===typeof t.pinned)&&("string"===typeof t.coverImage||void 0===t.coverImage)&&"string"===typeof t.summary}}},methods:{handleImageError(t){t.target.src="/placeholder-image.gif"}}};const V=(0,m.A)(G,[["render",W],["__scopeId","data-v-0abe35df"]]);var Z=V,K={name:"HomePage",components:{BlogPost:Z},setup(){const t=(0,R.Pj)(),n=(0,x.rd)(),e=6,o=(0,D.KR)(1),a=(0,r.EW)((()=>(console.log("Posts:",t.state.posts),t.state.posts))),i=(0,r.EW)((()=>a.value.filter((t=>!0===t.frontmatter?.pinned||!0===t.pinned)))),s=(0,r.EW)((()=>a.value.filter((t=>!0!==t.pinned)))),u=(0,r.EW)((()=>Math.ceil(s.value.length/e))),l=(0,r.EW)((()=>{const t=(o.value-1)*e,n=t+e;return s.value.slice(t,n)})),c=(0,r.EW)((()=>{const t=u.value,n=o.value,e=[];if(t<=5)for(let o=1;o<=t;o++)e.push(o);else if(n<=3)for(let o=1;o<=5;o++)e.push(o);else if(n>=t-2)for(let o=t-4;o<=t;o++)e.push(o);else for(let o=n-2;o<=n+2;o++)e.push(o);return e})),p=t=>{o.value=t,window.scrollTo({top:0,behavior:"smooth"})},d=t=>{n.push(`/post/${t}`)};return{pinnedPosts:i,paginatedRegularPosts:l,currentPage:o,totalPages:u,displayedPages:c,changePage:p,viewPost:d}}};const Q=(0,m.A)(K,[["render",O],["__scopeId","data-v-6ccd4249"]]);var tt=Q;const nt=[{path:"/",name:"Home",component:tt,beforeEnter:(t,n,o)=>{const r=[e.e(594).then(e.bind(e,3431)),e.e(503).then(e.bind(e,9294))];Promise.all(r).catch((()=>{})),o()}},{path:"/about",name:"About",component:()=>e.e(594).then(e.bind(e,3431)),meta:{keepAlive:!0}},{path:"/post/:id",name:"PostDetail",component:()=>Promise.all([e.e(137),e.e(205)]).then(e.bind(e,9969)),props:!0},{path:"/archive",name:"Archive",component:()=>e.e(503).then(e.bind(e,9294)),meta:{keepAlive:!0}}],et=(0,x.aE)({history:(0,x.Bt)(),routes:nt,scrollBehavior(t,n,e){return e||{top:0}}});et.beforeEach(((t,n,e)=>{e()}));var ot=et;e(2577),e(1454);const rt=e(5344);function at(t){const n=new Date(t);return n.toLocaleDateString("zh-CN",{year:"numeric",month:"long",day:"numeric"})}function it(t){if(!t)return"";if(t.startsWith("http"))return t;try{const n=e(1979),o=t.startsWith("/")?t.slice(1):t,r=n.keys().find((t=>{const n=t.replace(/^\.\//,"");return n===o}));if(r)return n(r);throw new Error(`Image not found: ${t}`)}catch(n){return console.warn(`Image loading error for ${t}:`,n),""}}function st(t){return t.replace(/!\[(.*?)\]\((.*?)\)/g,((t,n,e)=>{if(e.startsWith("http"))return t;try{const o=it(e);return o?`![${n}](${o})`:t}catch(o){return console.warn(`Failed to process image in markdown: ${e}`),t}}))}function ut(){return rt.keys().map(((t,n)=>{const e=t.replace(/^\.\//,"").replace(/\.md$/,""),{attributes:o,html:r}=rt(t);return{id:n+1,slug:e,title:o.title,date:at(o.date),summary:o.summary,coverImage:it(o.coverImage),pinned:o.pinned||!1,content:st(r)}}))}const lt=(0,R.y$)({state(){return{posts:ut()}},getters:{getPostById:t=>n=>t.posts.find((t=>t.id===parseInt(n))),getPostBySlug:t=>n=>t.posts.find((t=>t.slug===n)),getAllPosts:t=>t.posts},mutations:{UPDATE_POST(t,{id:n,post:e}){const o=t.posts.findIndex((t=>t.id===n));-1!==o&&(t.posts[o]={...t.posts[o],...e})}},actions:{updatePost({commit:t},n){t("UPDATE_POST",n)}}});var ct=lt;e(9351);const pt=(0,o.Ef)(k);pt.use(ct),pt.use(ot),pt.mount("#app")},1979:function(t,n,e){var o={"./12-8-1.png":514,"./12-8-2.jpg":6830,"./2.png":7478,"./3.png":4415,"./post2-1.png":1342};function r(t){var n=a(t);return e(n)}function a(t){if(!e.o(o,t)){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}return o[t]}r.keys=function(){return Object.keys(o)},r.resolve=a,t.exports=r,r.id=1979},5344:function(t,n,e){var o={"./post2.md":3937,"./post3.md":9317,"./post4.md":2879,"./post5.md":3352,"./post6.md":277,"./post7.md":8774,"./welcome.md":8277};function r(t){var n=a(t);return e(n)}function a(t){if(!e.o(o,t)){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}return o[t]}r.keys=function(){return Object.keys(o)},r.resolve=a,t.exports=r,r.id=5344},514:function(t,n,e){"use strict";t.exports=e.p+"img/12-8-1.36a8b19c.png"},6830:function(t,n,e){"use strict";t.exports=e.p+"img/12-8-2.65a28134.jpg"},7478:function(t,n,e){"use strict";t.exports=e.p+"img/2.82a2bed7.png"},4415:function(t,n,e){"use strict";t.exports=e.p+"img/3.1cf9cafa.png"},1342:function(t,n,e){"use strict";t.exports=e.p+"img/post2-1.e41820ee.png"}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={exports:{}};return t[o].call(a.exports,a,a.exports,e),a.exports}e.m=t,function(){var t=[];e.O=function(n,o,r,a){if(!o){var i=1/0;for(c=0;c<t.length;c++){o=t[c][0],r=t[c][1],a=t[c][2];for(var s=!0,u=0;u<o.length;u++)(!1&a||i>=a)&&Object.keys(e.O).every((function(t){return e.O[t](o[u])}))?o.splice(u--,1):(s=!1,a<i&&(i=a));if(s){t.splice(c--,1);var l=r();void 0!==l&&(n=l)}}return n}a=a||0;for(var c=t.length;c>0&&t[c-1][2]>a;c--)t[c]=t[c-1];t[c]=[o,r,a]}}(),function(){e.n=function(t){var n=t&&t.__esModule?function(){return t["default"]}:function(){return t};return e.d(n,{a:n}),n}}(),function(){e.d=function(t,n){for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})}}(),function(){e.f={},e.e=function(t){return Promise.all(Object.keys(e.f).reduce((function(n,o){return e.f[o](t,n),n}),[]))}}(),function(){e.u=function(t){return"js/"+({205:"post",503:"archive",594:"about"}[t]||t)+"."+{137:"5b3b94a8",205:"4949aaf3",503:"29cb7fcf",594:"6f7f4a2a"}[t]+".js"}}(),function(){e.miniCssF=function(t){return"css/post.7c97d133.css"}}(),function(){e.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"===typeof window)return window}}()}(),function(){e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)}}(),function(){var t={},n="xingyunchaju:";e.l=function(o,r,a,i){if(t[o])t[o].push(r);else{var s,u;if(void 0!==a)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var p=l[c];if(p.getAttribute("src")==o||p.getAttribute("data-webpack")==n+a){s=p;break}}s||(u=!0,s=document.createElement("script"),s.charset="utf-8",s.timeout=120,e.nc&&s.setAttribute("nonce",e.nc),s.setAttribute("data-webpack",n+a),s.src=o),t[o]=[r];var d=function(n,e){s.onerror=s.onload=null,clearTimeout(m);var r=t[o];if(delete t[o],s.parentNode&&s.parentNode.removeChild(s),r&&r.forEach((function(t){return t(e)})),n)return n(e)},m=setTimeout(d.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=d.bind(null,s.onerror),s.onload=d.bind(null,s.onload),u&&document.head.appendChild(s)}}}(),function(){e.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}}(),function(){e.p="/SUXUING-star.github.io/"}(),function(){if("undefined"!==typeof document){var t=function(t,n,o,r,a){var i=document.createElement("link");i.rel="stylesheet",i.type="text/css",e.nc&&(i.nonce=e.nc);var s=function(e){if(i.onerror=i.onload=null,"load"===e.type)r();else{var o=e&&e.type,s=e&&e.target&&e.target.href||n,u=new Error("Loading CSS chunk "+t+" failed.\n("+o+": "+s+")");u.name="ChunkLoadError",u.code="CSS_CHUNK_LOAD_FAILED",u.type=o,u.request=s,i.parentNode&&i.parentNode.removeChild(i),a(u)}};return i.onerror=i.onload=s,i.href=n,o?o.parentNode.insertBefore(i,o.nextSibling):document.head.appendChild(i),i},n=function(t,n){for(var e=document.getElementsByTagName("link"),o=0;o<e.length;o++){var r=e[o],a=r.getAttribute("data-href")||r.getAttribute("href");if("stylesheet"===r.rel&&(a===t||a===n))return r}var i=document.getElementsByTagName("style");for(o=0;o<i.length;o++){r=i[o],a=r.getAttribute("data-href");if(a===t||a===n)return r}},o=function(o){return new Promise((function(r,a){var i=e.miniCssF(o),s=e.p+i;if(n(i,s))return r();t(o,s,null,r,a)}))},r={524:0};e.f.miniCss=function(t,n){var e={205:1};r[t]?n.push(r[t]):0!==r[t]&&e[t]&&n.push(r[t]=o(t).then((function(){r[t]=0}),(function(n){throw delete r[t],n})))}}}(),function(){var t={524:0};e.f.j=function(n,o){var r=e.o(t,n)?t[n]:void 0;if(0!==r)if(r)o.push(r[2]);else{var a=new Promise((function(e,o){r=t[n]=[e,o]}));o.push(r[2]=a);var i=e.p+e.u(n),s=new Error,u=function(o){if(e.o(t,n)&&(r=t[n],0!==r&&(t[n]=void 0),r)){var a=o&&("load"===o.type?"missing":o.type),i=o&&o.target&&o.target.src;s.message="Loading chunk "+n+" failed.\n("+a+": "+i+")",s.name="ChunkLoadError",s.type=a,s.request=i,r[1](s)}};e.l(i,u,"chunk-"+n,n)}},e.O.j=function(n){return 0===t[n]};var n=function(n,o){var r,a,i=o[0],s=o[1],u=o[2],l=0;if(i.some((function(n){return 0!==t[n]}))){for(r in s)e.o(s,r)&&(e.m[r]=s[r]);if(u)var c=u(e)}for(n&&n(o);l<i.length;l++)a=i[l],e.o(t,a)&&t[a]&&t[a][0](),t[a]=0;return e.O(c)},o=self["webpackChunkxingyunchaju"]=self["webpackChunkxingyunchaju"]||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))}();var o=e.O(void 0,[683,501,849,823],(function(){return e(1137)}));o=e.O(o)})();
//# sourceMappingURL=app.bea4a319.js.map